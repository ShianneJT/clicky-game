{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/CharacterCard/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","className","this","props","children","React","Component","Header","id","clickMessage","score","highScore","CharacterCard","handleImgClick","handleOnClick","src","image","alt","name","onClick","Footer","class","href","target","rel","App","state","characters","cardHolder","document","querySelector","clickMsg","classList","remove","clickedImg","filter","character","clicked","add","setState","handleGameReset","handleCardShuffle","cards","i","length","j","Math","floor","random","temp","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc928d2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nclass Wrapper extends React.Component {\r\n    render() {\r\n        return <div className=\"wrapper\">{this.props.children}</div>;\r\n    }\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nclass Header extends React.Component {\r\n    render () {\r\n        return (\r\n            <>\r\n                <div className=\"header\"></div>\r\n                <nav className=\"navbar\">\r\n                    <h3>Clicky Game!</h3>\r\n                    <h3 id=\"click-msg\">{this.props.clickMessage}</h3>\r\n                    <h3 className=\"score\">Score: {this.props.score} &mdash; High Score: {this.props.highScore}</h3>\r\n                </nav>\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Header;\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\nimport React from 'react';\r\nimport './style.css';\r\n\r\nclass CharacterCard extends React.Component {\r\n\r\n    handleImgClick = () => {\r\n        this.props.handleOnClick(this.props.id);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"img-container\" id={this.props.id}>\r\n                    <img src={this.props.image} alt={this.props.name} onClick={this.handleImgClick}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <div class=\"footer\">\r\n                    <h5>&#169; Shianne J Taylor 2020 <a href=\"https://github.com/ShianneJT/clicky-game\" target=\"_blank\" rel=\"noopener noreferrer\"><i class=\"fab fa-github fa-lg\"></i></a></h5>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport CharacterCard from './components/CharacterCard';\nimport Footer from './components/Footer';\nimport characters from './characters.json';\n\n\nclass App extends React.Component {\n    state = {\n        characters,\n        score: 0,\n        highScore: 0,\n        clickMessage: 'Click an image to gain a point! But don\\'t click the same image twice or you lose!'\n    };\n\n    handleImgClick = id => {\n        const cardHolder = document.querySelector('#card-holder');\n        const clickMsg = document.querySelector('#click-msg');\n        clickMsg.classList.remove();\n        cardHolder.classList.remove('shake');\n        const clickedImg = this.state.characters.filter(character => character.id === id);\n        // if clickedImg = true, send click message and reset the game\n        if (clickedImg[0].clicked) {\n            cardHolder.classList.add('shake');\n            this.setState({\n                score: 0,\n                clickMessage: 'You clicked that one already!'\n            });\n            this.handleGameReset();\n        // if score is less than 11, set the state of the card to true (clicked), increment the current score by 1\n        } else if (this.state.score < 11 ) {\n            clickedImg[0].clicked = true;\n            this.setState({ score: this.state.score + 1 }, () => {\n                // if current score is higher than high score, update high score\n                if (this.state.score > this.state.highScore) {\n                    this.setState({ highScore: this.state.score });\n                }\n            });\n            this.setState({ clickMessage: 'Good job! Keep going!' });\n            this.handleCardShuffle();\n        // if this is the last card being clicked on, update states and reset game\n        } else {\n            clickedImg[0].clicked = true;\n            clickMsg.classList.add('animate__animated', 'animate__bounce');\n            this.setState({\n                score: 0,\n                highScore: 12,\n                clickMessage: 'You got them all! Play again?' });\n            this.handleGameReset();\n        };\n    }\n\n    handleCardShuffle = () => {\n        let cards = this.state.characters;\n        for (let i = 0; i < cards.length - 1; i++) {\n            let j = i + Math.floor(Math.random() * (cards.length - i));\n\n            const temp = cards[j];\n            cards[j] = cards[i];\n            cards[i] = temp;\n        };\n        this.setState({ characters: cards });\n    };\n\n    handleGameReset = () => {\n        for (let i = 0; i < this.state.characters.length; i++) {\n            characters[i].clicked = false;\n            this.setState({\n                score: 0,\n                characters: characters\n            });\n            this.handleCardShuffle();\n        };\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Header score={this.state.score} highScore={this.state.highScore} clickMessage={this.state.clickMessage} />\n                <div id=\"card-holder\">\n                    {this.state.characters.map((character) => (\n                        <CharacterCard\n                            key={character.id}\n                            id={character.id}\n                            image={character.image}\n                            handleOnClick={this.handleImgClick}\n                        />\n                    ))}\n                </div>\n                <Footer />\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}